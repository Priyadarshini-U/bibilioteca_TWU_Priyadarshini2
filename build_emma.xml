<?xml version = "1.0"?>
<project name="CalculatorApplication" default="runjUnit" basedir=".">


    <property name="coverage.dir" value="${basedir}/reports/emma" />     <!-- directory which emma coverage reports will be written to -->
    <property name="instr.dir" value="${basedir}/target/emmainstr" />    <!-- directory which emma instrumentation classes will be written to -->
    <property name="emma.dir" value="${basedir}/lib/emma" />             <!-- directory that contains emma.jar and emma_ant.jar -->

    <!-- Set emma.lib to refer to the list of EMMA jar files -->
    <path id="emma.lib" >
        <fileset dir="${emma.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- Define which classes will be reported in the coverage reports (by default, we will include all classes and assume -->
    <!-- that your project's output folder is target/classes -->
    <path id="emma.coverage.classes" >
        <pathelement location="${basedir}/out" />
    </path>

    <!-- Load <emma> and <emmajava> custom tasks so that they can be used in ANT -->
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <!-- Enable Emma -->
    <target name="emma" description="turns on EMMA's instrumentation/reporting" >

        <property name="emma.enabled" value="true" />
        <property name="emma.verbosity" value="verbose" />

        <!-- EMMA instr class output directory (it is important to create this property only when EMMA is enabled) -->
        <mkdir dir="${instr.dir}" />

        <!-- this property, if overriden via -Demma.filter=<list of filter specs>
         on ANT's command line, will set the coverage filter; by default,
         all classes found in 'emma.coverage.classes' pathref will be instrumented:
        -->
        <property name="emma.filter" value="" />

    </target>







    <target name="build" depends="clean">
        <mkdir dir="out"/>
        <javac destdir="out">
            <src path="src;test"/>
            <classpath location="lib/junit-4.11.jar"/>
            <classpath location="lib/mockito-all-1.9.5.jar"/>
            <classpath location="lib/hamcrest-core-1.3.jar"/>

        </javac>
    </target>

    <target name="clean" description="clean previous output directory">
        <delete dir="out"/>
    </target>

    <target name="runjUnit" depends="build,emma">
        <emma enabled="${emma.enabled}" >
            <instr instrpathref="emma.coverage.classes"
                   destdir="${instr.dir}"
                   metadatafile="${coverage.dir}/metadata.emma"
                   merge="true"
                    >
                <filter value="${emma.filter}" />
            </instr>
        </emma>

        <junit printsummary="yes" haltonfailure="true">
            <jvmarg value="-noverify"/>

            <classpath>
                <pathelement location="lib/junit-4.11.jar"/>
                <pathelement location="lib/mockito-all-1.9.5.jar"/>
                <pathelement location="lib/hamcrest-core-1.3.jar"/>
                <pathelement location="lib/emma/emma.jar"/>
                <pathelement location="lib/emma/emma_ant-2.0.4217.jar"/>
                <pathelement location="lib/emma/emma_ant.jar"/>
                <pathelement location="target/emmainstr"/>
            </classpath>
            <batchtest fork="yes">
                <formatter type="plain" usefile="false"/>
                <fileset dir="test">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <emma enabled="${emma.enabled}"  >
            <report sourcepath="src"
                    sort="+block,+name,+method,+class"
                    metrics="method:70,block:80,line:80,class:100"
                    >
                <!-- collect all EMMA data dumps (metadata and runtime)
                     [this can be done via nested <fileset> fileset elements
                     or <file> elements pointing to a single file]:
                -->
                <fileset dir="${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <!-- for every type of report desired, configure a nested
                     element; various report parameters
                     can be inherited from the parent <report>
                     and individually overridden for each report type:
                -->
                <txt outfile="${coverage.dir}/coverage.txt"
                     depth="package"
                     columns="class,method,block,line,name"
                        />
                <xml outfile="${coverage.dir}/coverage.xml"
                     depth="package"
                        />
                <html outfile="${coverage.dir}/coverage.html"
                      depth="method"
                      columns="name,class,method,block,line"
                        />
            </report>
        </emma>

    </target>

</project>
